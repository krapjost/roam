:PROPERTIES:
:ID:       d7db802d-d95d-4e88-a23f-19b0183eb0fc
:END:
#+title: clj-kondo
#+hugo_base_dir: ~/blog
#+hugo_section: ../content_ko/posts
#+hugo_publishdate: <2022-11-01 Tue 03:57>
#+hugo_front_matter_format: yaml
#+hugo_auto_set_lastmod: t
#+filetags: @clojure clojure-lsp clj-kondo

* clj-kondo는

클로저를 위한 정적 코드 분석도구이다. [[https://clojure-lsp.io/settings/#clj-kondo][clojure-lsp에서 내부적으로 사용하고 있다.]]

** 문제

[[id:611e5f72-c83f-40fe-8159-354b5f7692fc][소설 연재 플랫폼 개발 일지 005]]에서 잘 작동하는 코드에 lsp가 =unresolved symbol= 에러를 띄우는 문제가 있었다.

** 해결 시도 1

처음에는 클래스패스를 읽지 못해서 그런가 싶어서 프로젝트 =.lsp= 디렉터리에 다음 설정을 해보았다.

#+begin_src clojure
{:project-specs [{:project-path "shadow-cljs.edn"
                  :classpath-cmd ["shadow-cljs" "classpath"]}]}
#+end_src
shadow-cljs.edn이 있는 곳이 프로젝트 루트이고, 클래스패스는 다음 명령으로 읽어라하고 지정했다.
하지만 clojure-lsp는 기본적으로 =shadow-cljs.edn= 파일이 발견되면 =npx shadow-cljs classpath= 명령으로 클래스패스를 읽는다고 한다.
별 의미 없는 설정이었다.

** 해결

검색 결과 [[https://github.com/clojure-lsp/clojure-lsp/issues/356][유사한 문제]]를 겪는 분이 있어 해당 스레드의 도움을 받았다.

#+begin_quote
Clj-kondo only expands a selected set of macros from clojure.core and some popular community libraries. For unrecognized macros you can use these configurations:
#+end_quote

clj-kondo는 일부 유명한 라이브러리들과 클로저 코어에 있는 매크로들만 파악할 수 있다고 한다. clj-kondo가 알지 못하는 매크로들은 다음과 같은 설정을 해주어야 한다.
#+begin_src
{;; https://github.com/clj-kondo/clj-kondo/blob/master/doc/linters.md#unresolved-symbol
 :linters {:unresolved-symbol {:exclude [render]}}
 ;; https://github.com/clj-kondo/clj-kondo/blob/master/doc/config.md#lint-a-custom-macro-like-a-built-in-macro
 :lint-as {shadow.grove/defc clojure.core/defn}}
#+end_src

속이 시원하다.
